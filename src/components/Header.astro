---
import { Home, BookOpen, Map, BookText, Users, BookIcon, ChevronDown, Telescope } from 'lucide-react'; // Added Telescope icon

// Get the current pathname for active link highlighting
const pathname = Astro.url.pathname;

// Define base and active link classes for easier management
const linkBaseClasses = "flex items-center py-2 px-3 rounded-md text-sm font-medium transition-colors";
const linkInactiveClasses = "text-muted-foreground hover:bg-accent hover:text-accent-foreground";
const linkActiveClasses = "bg-primary text-primary-foreground"; // Active link style

// Helper function for aria-current
const getAriaCurrent = (href: string) => pathname === href ? 'page' : undefined;

// Check if the current page is a chapter page
const isChapterPage = pathname === '/' || 
                      pathname === '/chapter-two' || 
                      pathname === '/chapter-three' || 
                      pathname === '/chapter-four' || 
                      pathname === '/chapter-five' ||
                      pathname === '/chapter-six';

const chapters = [
  { href: '/', title: 'Chapter One' },
  { href: '/chapter-two', title: 'Chapter Two' },
  { href: '/chapter-three', title: 'Chapter Three' },
  { href: '/chapter-four', title: 'Chapter Four' },
  { href: '/chapter-five', title: 'Chapter Five' },
  { href: '/chapter-six', title: 'Chapter Six' }
];
---
<header class="py-3 bg-background border-b border-border">
  <div class="max-w-6xl mx-auto px-4">
    <!-- Site title -->
    <div class="flex justify-between items-center mb-2">
      <div class="w-10 md:w-24">
        <!-- Empty div for layout balance -->
      </div>
      
      <div class="flex items-center justify-center">
        <Telescope className="w-6 h-6 mr-2" />
        <h1 class="text-2xl font-bold">Downscope</h1>
      </div>
      
      <!-- Mobile menu button (hidden on desktop) -->
      <div class="flex md:hidden w-10">
        <button 
          id="mobile-menu-toggle"
          aria-label="Toggle navigation menu" 
          class="p-2 rounded-md text-muted-foreground hover:bg-accent hover:text-accent-foreground"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="menu-icon">
            <line x1="4" x2="20" y1="12" y2="12"></line>
            <line x1="4" x2="20" y1="6" y2="6"></line>
            <line x1="4" x2="20" y1="18" y2="18"></line>
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="close-icon hidden">
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Empty div to balance layout on desktop -->
      <div class="hidden md:block w-24"></div>
    </div>
    
    <nav aria-label="Main navigation">
      <!-- Navigation links -->
      <ul id="nav-links" class="hidden md:flex md:flex-row md:justify-center md:items-center md:space-x-1 lg:space-x-3 flex-col space-y-2 md:space-y-0">
        <!-- Unified Chapters dropdown -->
        <li class="relative chapters-dropdown">
          <button 
            id="chapters-dropdown-toggle" 
            class:list={[
              linkBaseClasses, 
              "inline-flex items-center w-full md:w-auto justify-between md:justify-start",
              isChapterPage ? linkActiveClasses : linkInactiveClasses
            ]}
          >
            <div class="flex items-center">
              <BookText className="w-4 h-4 mr-2" />
              <span>Chapters</span>
            </div>
            <ChevronDown className="w-4 h-4 ml-1" />
          </button>
          <div id="chapters-dropdown-menu" class="hidden w-full md:absolute md:left-0 md:w-48 md:mt-1 z-10 bg-background md:rounded-md md:shadow-lg md:border border-border py-1">
            {chapters.map(chapter => (
              <a 
                href={chapter.href}
                class:list={[
                  "block px-4 py-2 text-sm hover:bg-accent", 
                  pathname === chapter.href ? "text-primary font-medium" : "text-muted-foreground"
                ]}
              >
                {chapter.title}
              </a>
            ))}
          </div>
        </li>
        
        <!-- Other navigation items -->
        <li>
          <a
            href="/technical-primer"
            class:list={[
              linkBaseClasses,
              pathname === '/technical-primer' ? linkActiveClasses : linkInactiveClasses
            ]}
            aria-current={getAriaCurrent('/technical-primer')}
          >
            <BookOpen className="w-4 h-4 mr-2" />
            <span>Technical Primer</span>
          </a>
        </li>
        <li>
          <a
            href="/character-primer"
            class:list={[
              linkBaseClasses,
              pathname === '/character-primer' ? linkActiveClasses : linkInactiveClasses
            ]}
            aria-current={getAriaCurrent('/character-primer')}
          >
            <Users className="w-4 h-4 mr-2" />
            <span>Character Primer</span>
          </a>
        </li>
        <li>
          <a
            href="/world-guide"
            class:list={[
              linkBaseClasses,
              pathname === '/world-guide' ? linkActiveClasses : linkInactiveClasses
            ]}
            aria-current={getAriaCurrent('/world-guide')}
          >
            <Map className="w-4 h-4 mr-2" />
            <span>World Guide</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</header>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('mobile-menu-toggle');
    const navLinks = document.getElementById('nav-links');
    const menuIcon = document.querySelector('.menu-icon');
    const closeIcon = document.querySelector('.close-icon');
    
    if (toggle && navLinks && menuIcon && closeIcon) {
      toggle.addEventListener('click', () => {
        navLinks.classList.toggle('hidden');
        menuIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
      });
    }

    // Improved dropdown functionality
    const dropdownToggle = document.getElementById('chapters-dropdown-toggle');
    const dropdownMenu = document.getElementById('chapters-dropdown-menu');
    const dropdownContainer = document.querySelector('.chapters-dropdown');
    
    if (dropdownToggle && dropdownMenu && dropdownContainer) {
      let isOpen = false;
      let timeoutId: number | null = null;
      
      // Show dropdown on click (for both mobile and desktop)
      dropdownToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        isOpen = !isOpen;
        dropdownMenu.classList.toggle('hidden');
      });
      
      // Desktop hover functionality
      if (window.innerWidth >= 768) {
        // Show on hover
        dropdownContainer.addEventListener('mouseenter', () => {
          if (timeoutId) {
            clearTimeout(timeoutId);
            timeoutId = null;
          }
          dropdownMenu.classList.remove('hidden');
          isOpen = true;
        });
        
        // Hide on mouseleave with delay
        dropdownContainer.addEventListener('mouseleave', () => {
          timeoutId = setTimeout(() => {
            dropdownMenu.classList.add('hidden');
            isOpen = false;
          }, 200); // 200ms delay before hiding
        });
      }
      
      // Close dropdown when clicking outside (for both mobile and desktop)
      document.addEventListener('click', () => {
        if (isOpen) {
          dropdownMenu.classList.add('hidden');
          isOpen = false;
        }
      });
      
      // Prevent closing when clicking inside the dropdown
      dropdownMenu.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    }
  });
</script>

<style>
  /* Make nav links visible by default on desktop */
  @media (min-width: 768px) {
    #nav-links {
      display: flex !important;
    }
  }
  
  /* Remove the pure CSS hover dropdown as we're handling it with JS */
  /* Add proper pointer cursor to dropdown toggle */
  #chapters-dropdown-toggle {
    cursor: pointer;
  }
  
  /* Add more visible hover effect */
  .chapters-dropdown:hover #chapters-dropdown-toggle {
    background-color: var(--accent);
    color: var(--accent-foreground);
  }
</style>