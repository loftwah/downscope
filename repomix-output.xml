This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  favicon.svg
src/
  components/
    Button.astro
    Footer.astro
    Header.astro
  layouts/
    main.astro
  lib/
    utils.ts
  pages/
    index.md
    technical-primer.md
    world-guide.md
  styles/
    global.css
.gitignore
astro.config.mjs
components.json
package.json
README.md
tailwind.config.mjs
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="tailwind.config.mjs">
import typography from '@tailwindcss/typography';

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
  theme: {
    extend: {},
  },
  plugins: [
    typography,
  ],
}
</file>

<file path="public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>
</file>

<file path="src/components/Button.astro">
---
// Click button, get confetti!
// Styled by Tailwind :)
---

<button
	class="appearance-none py-2 px-4 bg-purple-500 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-opacity-75"
>
	<slot />
</button>

<script>
	import confetti from 'canvas-confetti';
	const button = document.body.querySelector('button');

	if (button) {
		button.addEventListener('click', () => confetti());
	}
</script>
</file>

<file path="src/components/Footer.astro">
<footer class="p-4 bg-background border-t border-border text-center mt-8">
  <p class="text-sm text-muted-foreground">&copy; 2024 Dean Lofts. All rights reserved.</p>
  <div class="flex justify-center space-x-4 mt-2">
    <a href="https://x.com/loftwah" target="_blank" rel="noopener noreferrer" class="text-sm text-muted-foreground hover:text-primary transition-colors">X.com</a>
    <a href="https://github.com/loftwah" target="_blank" rel="noopener noreferrer" class="text-sm text-muted-foreground hover:text-primary transition-colors">GitHub</a>
    <a href="https://linkarooie.com/loftwah" target="_blank" rel="noopener noreferrer" class="text-sm text-muted-foreground hover:text-primary transition-colors">Linkarooie</a>
  </div>
</footer>
</file>

<file path="src/components/Header.astro">
---
// Get the current pathname for active link highlighting
const pathname = Astro.url.pathname;

// Define base and active link classes for easier management
const linkBaseClasses = "flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors";
const linkInactiveClasses = "text-muted-foreground hover:bg-accent hover:text-accent-foreground";
const linkActiveClasses = "bg-primary text-primary-foreground"; // Active link style
---
<header class="p-4 bg-background border-b border-border flex justify-between items-center">
  <nav>
    <ul class="flex items-center space-x-4"> // Slightly reduced space between items
      <li>
        <a 
          href="/" 
          class:list={[
            linkBaseClasses,
            pathname === '/' ? linkActiveClasses : linkInactiveClasses
          ]}
        >
          <i class="fas fa-house w-4 h-4"></i> 
          <span>Home</span>
        </a>
      </li>
      <li>
        <a 
          href="/technical-primer" 
          class:list={[
            linkBaseClasses,
            pathname === '/technical-primer' ? linkActiveClasses : linkInactiveClasses
          ]}
        >
          <i class="fas fa-book w-4 h-4"></i> 
          <span>Technical Primer</span>
        </a>
      </li>
      <li>
        <a 
          href="/world-guide" 
          class:list={[
            linkBaseClasses,
            pathname === '/world-guide' ? linkActiveClasses : linkInactiveClasses
          ]}
        >
          <i class="fas fa-map w-4 h-4"></i> 
          <span>World Guide</span>
        </a>
      </li>
    </ul>
  </nav>
  <div class="overflow-hidden rounded-lg border border-border shadow-sm">
    <iframe
      width="480"
      height="270"
      src="https://www.youtube.com/embed/RbeNow4Ylvc"
      title="YouTube video player"
      frameborder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
      allowfullscreen
      class="block"
    ></iframe>
  </div>
</header>
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/index.md">
---
title: "DOWNSCOPE - CHAPTER 1: SHIP IT"
layout: ../layouts/main.astro
---

# DOWNSCOPE

![Downscope](../assets/images/downscope.jpg)

## CHAPTER 1: "SHIP IT"

The collective glow reflecting off a thousand faces across a dozen time zones was less illumination, more a digital phosphor burn painting veneers of attentiveness over profound fatigue. Innovate Solutions' quarterly All-Hands meeting was in full swing, or rather, full drone. Mark Weaver, CEO, occupied the central tile on the 

Content temporarily removed.
</file>

<file path="src/pages/technical-primer.md">
---
title: "DOWNSCOPE - CHAPTER 1: SHIP IT"
layout: ../layouts/main.astro
---

# DOWNSCOPE: Technical Primer

## Development & Operations Terms

**DevOps** - Development Operations; the practice of combining software development and IT operations to shorten development cycles and provide continuous delivery

**Infra** - Infrastructure; the hardware, software, networks, facilities used to develop, test, deliver, monitor, and support IT services

**SRE** - Site Reliability Engineer; focuses on availability, latency, performance, and capacity of software systems

**Deployment** - The process of releasing software to production environments

**Hackathon** - Time-constrained competitive event where people collaborate on software projects

**PR** - Pull Request; a method of submitting code changes for review before merging into the main codebase

**Commit** - Saving changes to code in a version control system with a unique identifier

## Frontend Technologies

**Astro** - High-performance web framework focused on content-driven websites with minimal JavaScript by default

**React** - JavaScript library for building user interfaces, especially single-page applications

**Vite** - Modern frontend build tool and development server with fast hot module replacement

**TypeScript** - Strongly-typed programming language that builds on JavaScript, providing type safety

**Tailwind CSS** - Utility-first CSS framework for rapidly building custom user interfaces

**ShadCN** - Component library built on Radix UI primitives with Tailwind CSS styling

## Tools & Technologies

**Slack** - Business messaging platform for team communication

**Signal** - Encrypted messaging app, more secure than standard messaging platforms

**Zoom** - Video conferencing platform

**Jira** - Project management software used for issue tracking and task management

**GitHub/Git** - Code repository and version control system

**Terminal/Command Line** - Text interface for entering commands directly to a computer

**VS Code** - Popular code editor developed by Microsoft

**Kubernetes/k8s** - Container orchestration system for automating software deployment and scaling

- **kubectl** - Command-line tool for controlling Kubernetes clusters

**AWS/GCP** - Amazon Web Services/Google Cloud Platform; cloud computing services

**Terraform** - Infrastructure as Code tool to provision and manage cloud resources

**Figma** - Collaborative interface design tool

**Notion** - All-in-one workspace that combines notes, tasks, wikis, and databases

## AI & Machine Learning

**LLM** - Large Language Model; AI systems trained on vast text data to generate human-like text

**ChatGPT/Claude** - Popular AI assistants built on LLM technology

**AI APIs** - Application Programming Interfaces that allow software to access AI capabilities

**Generative AI** - AI systems that can create new content (text, images, code, etc.)

**Prompt Engineering** - The process of designing inputs to get optimal outputs from AI systems

## Programming Terms

**IAM** - Identity and Access Management; controls who can access what resources

**Backend/Frontend** - Server-side vs. user interface parts of applications

**API** - Application Programming Interface; allows different software to communicate

**Authentication** - Verifying identity (who someone is)

**Authorization** - Determining access rights (what they can do)

**Pipeline** - A set of automated processes for delivering software

**Production/Staging** - Live vs. testing environments for software

**Regression** - A bug that breaks previously working functionality

## Corporate Tech Culture

**Standup** - Brief daily meeting where team members share progress and blockers

**Visibility** - How noticeable someone's work is to management and colleagues

**Technical Debt** - The implied cost of future rework caused by choosing quick solutions now

**Scope** - The defined features and functions of a project

**Cross-functional** - Involving people from different teams or specialties

**On-call** - Being available to respond to incidents outside normal working hours

**OKRs** - Objectives and Key Results; goal-setting framework used in tech companies

**Ship It** - To release or deploy a product or feature
</file>

<file path="src/pages/world-guide.md">
---
title: "DOWNSCOPE - CHAPTER 1: SHIP IT"
layout: ../layouts/main.astro
---

# DOWNSCOPE: Technical & World Guide

## The Technology Stack Behind "Aether"

**Core Infrastructure**

- AWS Bedrock as the foundation for AI capabilities
- Primary LLM: Anthropic's Claude (with occasional Nova model experiments)
- Secondary/fallback: AWS's proprietary models for specific workloads
- Containerized microservices architecture running on ECS with Docker
- Lambda functions for event-driven capabilities and serverless processing
- Private VPC configurations with stringent security groups
- Terraform-based infrastructure as code for rapid deployment

**Backend Architecture**

- FastAPI for high-performance, async-focused API endpoints
- Managed Kafka clusters for message queuing and event processing
- PostgreSQL (RDS) with custom schema design for complex data relationships
- Redis for caching and session management
- Custom authentication middleware using Jules's wrapper for cross-system IAM
- Elasticsearch for advanced search capabilities across disparate data sources

**Frontend Architecture**

- Astro as the core framework for optimal performance
- React with TypeScript for complex interactive components
- Vite for rapid development environment
- Tailwind CSS for utility-first styling
- ShadCN component library for consistent design language
- SSR (Server-Side Rendering) for initial page loads
- CSR (Client-Side Rendering) for dynamic interactions
- Strong type safety enforced throughout the codebase

**AI Implementation**

- RAG (Retrieval Augmented Generation) for grounding the model in company-specific data
- LangChain for orchestrating complex AI workflows and agent behaviors
- MCP (Model Context Protocol) implementation for connecting Aether to internal tools
- Vector embeddings stored in MongoDB for semantic search
- Fine-tuning pipeline for specialized tasks using company data
- Carefully engineered prompts with system instructions and few-shot examples

**Development Environment**

- Private GitHub repositories with restricted access
- CI/CD through GitHub Actions with custom deployment scripts
- Automated testing infrastructure for continuous validation
- Parallel staging environments for rapid iteration
- Grafana dashboards for real-time monitoring and alerts
- Shadow mode capabilities for testing against production traffic

## Communication Platforms & Protocols

**Official Company Channels**

- Slack: Primary company-wide communication
  - Public channels: #general, #announcements, #hackathon-general
  - Team channels: #team-catalyst, #team-nexus, #infra-ops
  - Project channels: #aether-dev, #aether-planning
  - Ad-hoc channels created and abandoned frequently
- Jira: Official project management and ticketing
  - Strictly enforced by Product teams (Victor's domain)
  - Largely bypassed by Infra for their core work
  - Used performatively for visibility and credit assignment
- Zoom: All synchronous meetings and presentations
  - Weekly standups, planning sessions, demos
  - Quarterly all-hands meetings
  - Performance reviews and 1:1s
- Email: Formal communications and documentation
  - Increasingly replaced by Slack for daily interaction
  - Still used for HR communications and external contacts

**Shadow IT & Backchannels**

- Signal: Used exclusively for sensitive communications
  - Rhys and Max's stimulant-enhanced coding sessions
  - Strategic discussions away from corporate logging
  - Conversations that require plausible deniability
  - Arranged meetings outside normal working hours
- Notion: Unofficial documentation and planning
  - Emma's product brainstorming outside Victor's view
  - Kara's design explorations before formal review
  - Team-specific knowledge bases that bypass official wikis
- Personal GitHub repos: Early prototyping before official projects
  - Max's code experiments before moving to company repos
  - Architecture explorations without scrutiny
  - Proof-of-concepts that might violate official guidelines
- WhatsApp/Telegram: Informal team communications
  - Cross-team alliances and gossip
  - Weekend and after-hours discussions
  - Venting channels for frustration and rumors

## Corporate Structures & Power Dynamics

**Official Hierarchy**

- Mark (CEO) → Greg (CTO) → Rhys (Head of Engineering) → Max (Principal Infra)
- Mark (CEO) → Victor (Head of Product) → Emma (PM) / Derek (Team Lead)
- Department siloes with limited cross-functional integration
- Quarterly OKRs that shift frequently based on market panic

**Shadow Hierarchy**

- Rhys operates with near-autonomy, leveraging Greg's technical deference
- Max functions as Rhys's deputy across official boundaries
- Derek navigates political currents to attach himself to power centers
- Jules contributes critical work while remaining functionally invisible
- Amir maintains influence through historical knowledge and quiet competence

**Information Flow**

- Official updates flow through formal channels but carry minimal substance
- Real decisions happen in private channels, DMs, and off-record meetings
- Technical truth exists in code repositories while narrative fiction dominates meetings
- Credit flows upward; blame flows downward
- Visibility trumps actual contribution for advancement

## Tech Industry Context (2025)

**Market Conditions**

- Post-AI bubble correction period
- VC funding drought after earlier overinvestment
- Pressure to demonstrate AI-driven value to investors
- Competitors rapidly mimicking successful features
- Industry-wide layoffs disguised as "strategic realignments"

**Technology Trends**

- AI has moved from novelty to expected infrastructure
- RAG and MCP have become standard for enterprise AI implementations
- Cloud cost optimization as important as feature development
- Privacy regulations creating compliance burdens
- Open-source alternatives threatening commercial models

**Work Culture**

- Remote-first with occasional "collaboration days" in shared spaces
- Performance metrics increasingly automated and AI-analyzed
- "Doing more with less" as universal management mantra
- Career advancement tied to visibility more than capability
- Physical workspace replaced by digital presence

## Key Technical Concepts in Story

**Aether's Core Functionality**
Aether integrates with all company systems to provide contextual intelligence across data silos. It can:

- Analyze customer interaction patterns to predict retention risk
- Generate personalized communication strategies based on historical interactions
- Identify cross-selling opportunities using patterns invisible to human analysts
- Automate routine support responses with customer-specific context
- Continuously learn from new interactions to improve recommendations

**Jules's Critical Contribution**
The authentication wrapper Jules created solves a fundamental security challenge for Aether:

- Provides secure, temporary, audited access across system boundaries
- Implements just-in-time privilege escalation with automatic expiration
- Creates fine-grained permission scopes for precise data access
- Maintains comprehensive audit logs for compliance
- Allows Aether to query sensitive data without permanent elevated access

**Max's Technical Domain**
Max's expertise spans multiple critical areas:

- Cloud infrastructure orchestration (AWS, Terraform, Kubernetes)
- AI model deployment and optimization
- High-performance distributed systems
- Security architecture and implementation
- Real-time monitoring and alerting systems

**Rhys's Strategic Vision for Aether**
Beyond the initial implementation, Rhys sees Aether evolving into:

- An autonomous agent platform that can execute actions, not just recommend them
- A system that could potentially replace significant portions of customer-facing roles
- A competitive advantage that places Infra at the center of the company's future
- A showcase for his technical leadership that could position him for CTO or beyond

## Character-Technology Relationships

**Max & Stimulants**

- Uses dexamphetamine (Adderall/dexies) methodically to maintain inhuman focus and output
- Dosing is precise and calculated, using pharmacy-grade pills in 5-10mg amounts
- Takes multiple tablets simultaneously (15-30mg) for extended coding sessions
- Consumption coincides with Rhys's expectations and deadlines
- Dry-swallows pills to minimize disruption to workflow
- Maintains supplies carefully, tracking consumption against project timelines
- Stimulant use enables the superhuman productivity that Rhys values and exploits

**Jules & Visibility**

- Creates elegant, critical technical solutions with minimal acknowledgment
- Documents thoroughly but in places few people read or reference
- Commits code with clear comments that get overlooked in demos and presentations
- Takes on essential "plumbing" work that enables flashier features
- Lacks the strategic language to translate technical contribution to business value
- Remains invisible in the Slack-performance-theater that dominates recognition

**Rhys & Control Systems**

- Uses technology as instruments of both creation and control
- Manipulates logging systems and metrics to support desired narratives
- Segments communication across platforms based on deniability needs
- Applies security controls selectively to maintain information advantages
- Creates technical dependencies that ensure his continued importance
- Builds "backdoors" into systems for monitoring and intervention

**Derek & Perception Management**

- Masters the tools of visibility (Jira, Slack, Zoom) rather than technical depth
- Curates metrics and dashboards that showcase team output as personal success
- Positions himself at key presentation moments to maximize association with success
- Uses technical language without technical understanding
- Captures credit through strategic meeting participation and documentation
- Creates dependency relationships through process control rather than knowledge

## AI in the Workplace (2025)

**Daily AI Integration**

- ChatGPT/Claude used routinely for drafting emails, Slack messages, documentation
- GitHub Copilot and similar tools for code assistance now standard
- AI meeting summaries and action item extraction for all synchronous communications
- Automated performance analytics based on system interaction patterns
- AI-suggested career development paths based on skill gaps

**The Human-AI Boundary**

- Increasing anxiety about which roles remain "AI-proof"
- Shift from "AI will help humans" to "humans assist AI" in certain domains
- New job categories emerging as AI handlers and prompt engineers
- Growing divide between those who can direct AI effectively and those who can't
- Ethical questions about disclosure of AI-generated work largely ignored

**Anthropic's Claude in the Company**

- Enterprise license allows unlimited usage across departments
- Specialized Claude instances fine-tuned for company-specific tasks
- Widespread reliance on Claude for communication drafting creating homogenized voice
- Internal jokes about "That sounds like Claude wrote it" when detecting AI text
- Growing dependency on Claude for institutional knowledge as documentation lags

## Environmental Details

**Remote Work Environments**

- Jules: Cluttered home office with kid's drawings, family photos, dated equipment
- Max: Minimalist, ergonomic setup with multiple high-end monitors, precisely organized
- Rhys: Two separate workspaces: sterile, professional office for company work; comfortable, warm space for family life
- Emma: Plant-filled, creatively chaotic space with post-its and inspiration boards
- Derek: Carefully curated background with subtle signals of success and ambition

**Digital Tells**

- Signal notifications distinct from regular Slack sounds
- Calendar invites that appear and disappear without explanation
- Late night commit timestamps revealing unsustainable work patterns
- Status indicators showing "active" at unusual hours
- Meeting recordings that start late or end early, missing key discussions
- The pregnant pause of typing indicators that suddenly disappear

**Technical Accuracy Markers**

- Terminal sessions showing real commands (git operations, AWS CLI, kubectl)
- VS Code with actual working code in appropriate languages (Python for FastAPI, TypeScript for frontends)
- Accurate error messages and debugging processes
- Realistic Slack threading and emoji reactions
- Authentic Jira ticket structures and transitions
- Plausible API designs and architecture diagrams

## Tech Culture Easter Eggs

- References to real tech controversies and memes
- Subtle nods to famous tech company failures and successes
- Inside jokes about framework choices and language preferences
- Realistic burn rate calculations and funding discussions
- Accurate portrayal of the gap between marketing promises and technical reality
</file>

<file path=".gitignore">
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/
</file>

<file path="astro.config.mjs">
// @ts-check
import { defineConfig } from 'astro/config';
import tailwindcss from '@tailwindcss/vite';

import react from '@astrojs/react';

// https://astro.build/config
export default defineConfig({
  vite: {
      plugins: [
        tailwindcss()
      ]
	},

  integrations: [react()]
});
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/global.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="src/layouts/main.astro">
---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
const { content } = Astro.props;
---

<html lang="en" class="dark">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{content.title}</title>
	</head>
	<body class="min-h-screen flex flex-col bg-background text-foreground">
		<Header />
		<main class="container mx-auto px-4 py-8 flex-grow prose dark:prose-invert max-w-none">
			<slot />
		</main>
		<Footer />
	</body>
</html>
</file>

<file path="src/styles/global.css">
@import 'tailwindcss';
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="package.json">
{
  "name": "astro-app",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/mdx": "^4.2.3",
    "@astrojs/react": "^4.2.3",
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-regular-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@tailwindcss/vite": "^4.0.17",
    "@types/canvas-confetti": "^1.9.0",
    "@types/react": "^19.1.0",
    "@types/react-dom": "^19.1.1",
    "astro": "^5.6.1",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.487.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "tailwind-merge": "^3.1.0",
    "tailwindcss": "^4.0.17",
    "tw-animate-css": "^1.2.5"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.16"
  }
}
</file>

<file path="README.md">
# Astro with Tailwind

```sh
npm create astro@latest -- --template with-tailwindcss
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/with-tailwindcss)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/with-tailwindcss)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/with-tailwindcss/devcontainer.json)

Astro comes with [Tailwind](https://tailwindcss.com) support out of the box. This example showcases how to style your Astro project with Tailwind.

For complete setup instructions, please see our [Tailwind Integration Guide](https://docs.astro.build/en/guides/integrations-guide/tailwind).
</file>

<file path="tsconfig.json">
{
  "extends": "astro/tsconfigs/strict",
  "include": [
    ".astro/types.d.ts",
    "**/*"
  ],
  "exclude": [
    "dist"
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "jsx": "react-jsx",
    "jsxImportSource": "react"
  }
}
</file>

</files>
